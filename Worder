def copy(s):
    news=[]
    for i in s:
        news.append(i)
    return news

def split_into_words(s):#tested
    sentences=[]
    words=[]
    word=""
    ignorespace=False
    for letter in s:
        if letter==' ' and ignorespace==False:
            words.append(word)
            word=""
        elif letter==' ' and ignorespace==True:
            ignorespace=False
        elif letter=="." or letter=="?" or letter=="!":
            words.append(word)
            words.append(letter)
            sentences.append(copy(words))
            words=[]
            word=""
            ignorespace=True
        elif letter=="," or letter==";" or letter==":":
            words.append(word)
            words.append(letter)
            word=""
            ignorespace=True
        else:
            word+=letter
    return sentences

def alph_index(letter):
    if ord(letter)>64 and ord(letter)<91:
        index=ord(letter)-64
    elif ord(letter)>96 and ord(letter)<123:
        index=ord(letter)-96
    return index

def compare_words(worda,wordb):#returns later word
    length=min(len(worda),len(wordb))
    for i in range(0,length):
        if alph_index(worda[i])<alph_index(wordb[i]):
            return wordb
        elif alph_index(worda[i])>alph_index(wordb[i]):
            return worda
    if len(worda)>len(wordb):
        return worda
    elif len(wordb)>len(worda):
        return wordb
    else:
        return "same"

vocab=[]#arranged as a list of ordered pairs (word,description)

def find_word(word):#untested,vocab is alphebetized
    global vocab
    low=0
    high=len(vocab)
    while high-low!=0:
        mid=int((low+high)/2)
        higher=compare_words(word,vocab[mid][0])
        if higher==word:
            if low!=mid:
                low=mid
            else:
                low=high
        elif higher==vocab[mid][0]:
            high=mid
        elif higher=="same":
            return [mid,True]#index word is/should go, whether it's there   
    if low==high:
        return [low,False]
    else:
        print("error: low!=high")

def add_word(word):
    global vocab
    i=find_word(word)
    if i[1]==False:
        vocab.insert(i[0],word)
    else:
        return "repeat word"
    
#2 ways to define a word: dictionary and concept
#dictionary definition defines a word in terms of other words
#concept definition defines a word through linking it with other concepts through examples
#sometimes the same word can belong to different grammatical classes while still being roughly the same concept.
#So we shouldn't require a new concept for each grammatical class

def find_unknown_words(s):
    global vocab
    s=split_into_words(s)
    for sentence in s:
        for word in sentence:
            if word!="." and word!="," and word!="!" and word!="?" and word!=":" and word!=";":
                if find_word[1]==False:
                    pos=""
                    while pos!="noun" and pos!="adjective" and pos!="adverb" and pos!="pronoun" and pos!="preposition" and pos!="conjunction" and pos!="verb" and pos!="interjection":
                        pos=input("What type of word is this?")
                    definition=raw_input("Define ", word)
                    if definition=="undef":
                        definition=False
                    questions_mode=input("Want to go to questioning mode to define the word more?")
                    #ask for a definition/part of speech
        
